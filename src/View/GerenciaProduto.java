/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import DAO.ProdutoDAO;
import Model.Produto;
import Result.Resultado;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sofia
 */
public class GerenciaProduto extends javax.swing.JFrame {

    private final ProdutoDAO produtoDAO;
    private ArrayList<Produto> listaProdutos;
    private final boolean possuiAdmin;
    private final boolean visualizaEmFalta;
    private final static SimpleDateFormat formataDataInicial = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
    private final static SimpleDateFormat formataDataFinal = new SimpleDateFormat("dd/MM/yyyy");
    private final DecimalFormat formataMoeda = new DecimalFormat("R$ #,##0.00");
    
    public GerenciaProduto(boolean possuiAdmin, boolean visualizaEmFalta) {
        initComponents();
        this.produtoDAO = new ProdutoDAO();
        this.carregaTabela();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.possuiAdmin = possuiAdmin;
        this.visualizaEmFalta = visualizaEmFalta;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b_visualizar = new javax.swing.JButton();
        b_apagar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProdutos = new javax.swing.JTable();
        jTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        b_visualizar.setText("Visualizar");
        b_visualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_visualizarActionPerformed(evt);
            }
        });

        b_apagar.setText("Apagar");
        b_apagar.setEnabled(false);
        b_apagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_apagarActionPerformed(evt);
            }
        });

        jTableProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Cód. Produto", "Nome", "Descrição", "Qnt. Estoque", "Preço", "Categoria", "Data Cadastro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableProdutos);

        jTitulo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jTitulo.setText("Estoque");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(316, Short.MAX_VALUE)
                .addComponent(b_visualizar)
                .addGap(18, 18, 18)
                .addComponent(b_apagar)
                .addGap(309, 309, 309))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                    .addComponent(jTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_visualizar)
                    .addComponent(b_apagar))
                .addGap(25, 25, 25))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void b_visualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_visualizarActionPerformed

        try {
            if (this.jTableProdutos.getSelectedRow() == -1) {
                throw new Exception("Primeiro selecione um produto para visualizar.");
            } else {
                Produto produtoSelecionado = pegarDadosProdutoSelecionado();
                new VisualizaProduto(produtoSelecionado, possuiAdmin, visualizaEmFalta).setVisible(true);
            }
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
            carregaTabela();
        }
    }//GEN-LAST:event_b_visualizarActionPerformed

    private void b_apagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_apagarActionPerformed
        try {
            int id = 0;
            if (this.jTableProdutos.getSelectedRow() == -1) {
                throw new Exception("Primeiro selecione um produto para apagar.");
            } else {
                id = Integer.parseInt(this.jTableProdutos.getValueAt(this.jTableProdutos.getSelectedRow(), 0).toString());
            }

            int resposta_produto = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja apagar este produto?");

            if (resposta_produto == 0) {
                Resultado resultado = this.produtoDAO.DeleteProdutoDB(id);
                JOptionPane.showMessageDialog(rootPane, resultado.getMensagem());
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
            carregaTabela();
        }
    }//GEN-LAST:event_b_apagarActionPerformed

    private void jTableProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProdutosMouseClicked

    }//GEN-LAST:event_jTableProdutosMouseClicked

    @SuppressWarnings("unchecked")
    public final void carregaTabela() {
        try {
            DefaultTableModel modelo = (DefaultTableModel) this.jTableProdutos.getModel();
            modelo.setNumRows(0);
            if (visualizaEmFalta) {
                this.listaProdutos = this.produtoDAO.getProdutosEmFalta();
            } else {
                this.listaProdutos = this.produtoDAO.getMinhaLista();
            }

            for (Produto produto : listaProdutos) {
                String data = formataDataFinal.format(formataDataInicial.parse(produto.getData_cadastro()));
                String preco = formataMoeda.format(produto.getPreco());

                modelo.addRow(new Object[]{
                    produto.getCodigo_produto(),
                    produto.getNome_produto(),
                    produto.getDescricao_produto(),
                    produto.getQuantidade_estoque(),
                    preco,
                    produto.getCategoria_produto(),
                    data,
                });
            }

            this.jTitulo.setText(construirTitulo());
            this.b_apagar.setEnabled(possuiAdmin);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private Produto pegarDadosProdutoSelecionado() {
        int codigoProduto = Integer.parseInt(this.jTableProdutos.getValueAt(this.jTableProdutos.getSelectedRow(), 0).toString());
        return produtoDAO.carregaProdutoDB(codigoProduto);
//        return new Produto(;
//            Integer.parseInt(this.jTableProdutos.getValueAt(this.jTableProdutos.getSelectedRow(), 0).toString()), //cod
//            this.jTableProdutos.getValueAt(this.jTableProdutos.getSelectedRow(), 1).toString(), //nm
//            this.jTableProdutos.getValueAt(this.jTableProdutos.getSelectedRow(), 2).toString(), //des
//            this.jTableProdutos.getValueAt(this.jTableProdutos.getSelectedRow(), 5).toString(),//cat
//            Integer.parseInt(this.jTableProdutos.getValueAt(this.jTableProdutos.getSelectedRow(), 3).toString()), //qnt
//            Double.parseDouble(this.jTableProdutos.getValueAt(this.jTableProdutos.getSelectedRow(), 4).toString()), //pre
//            this.jTableProdutos.getValueAt(this.jTableProdutos.getSelectedRow(), 6).toString()//dat
//        );
    }
    
    private String construirTitulo() {
        String sufixoProduto;
        int tamanhoLista = listaProdutos.size();
        if (tamanhoLista != 1) { 
            sufixoProduto = "s";
        } else {
            sufixoProduto = "";
        }
        if (visualizaEmFalta) {
            return ("Estoque - " + tamanhoLista + " produto" + sufixoProduto + " em falta");
        } else {
            return ("Estoque - " + tamanhoLista + " produto" + sufixoProduto);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_apagar;
    private javax.swing.JButton b_visualizar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableProdutos;
    private javax.swing.JLabel jTitulo;
    // End of variables declaration//GEN-END:variables
}
